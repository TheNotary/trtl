<script src="http://127.0.0.1:4555/faye/client.js"></script>

<!-- STUFF RELATED TO COMMUNICATION WITH MAGIC MIRROR: MOVES VERY SOON -->
<!-- <script src="/magic_mirror.js"></script> -->
<script>

var MagicMirror = {
    clearCommandCache: function() {
        window.command_cache = [];
        // also remove the canvases
    },
    setTitle: function(title) {
        document.title = title;
    }
};

// iterates over the array 'a' executing the command
function z(a){
    for (var i = 0, l = a.length; i < l; i++)
        eval(a.shift());
}



var FayeUtility = function(options) {
    var channel = options.dataChannel;
    this.client = createNewChatClient(options.domain, options.port);

    function createNewChatClient(serverAddress, chatPort){
        var client = new Faye.Client('http://' + serverAddress + ':' + chatPort + '/faye', {
            timeout: 120
        });
        client.bind('transport:down', function() {
            console.log("Faye connection lost");
        });
        client.bind('transport:up', function() {
            console.log("Connected to Faye");
        });
        subscribeToDataChannel(client);
        return client;
    };

    function subscribeToDataChannel(_client){
        this.subscription = _client.subscribe(channel, function(message) {
            // fayeUtility.printToConsole(JSON.stringify(message));

            // Run the code!
            eval(message)
        });
    };

    this.publish_message_to_faye = function(msg) {
        client.publish(channel, {text: msg});
    };

    this.printToConsole = function(msg) {
        // var el = document.getElementById('console');
        // el.innerHTML = el.innerHTML + "<div>" + msg + "</div>";
        console.log("Got command from ruby: " + msg);
    };
};


MagicMirror.fayeUtility = new FayeUtility({ domain: "localhost",
                                            port: "4555",
                                            dataChannel: "/0001"});

</script>





<body style="background:black;">
</body>


<script>

// RenderingCanvas.new("myCanvas", { title: 'trtl', minsize: [800, 600] })
var RenderingCanvas = {
    new: function(canvasID, options) {
        var canvas = document.createElement('canvas');

        canvas.id = canvasID;
        canvas.width = options.width;
        canvas.height = options.height;
        canvas.style.zIndex = 8;
        canvas.style.position = "absolute";
        canvas.style.left = 8;
        canvas.style.top = 8;
        canvas.style.border = "1px solid";
        // canvas.style.background = options.bg;

        // options.highlightthickness: 0
        // options.bg: 'black'

        // delete canvas element if it exists
        DeleteOldCanvas(canvasID);

        document.body.appendChild(canvas);
        return canvas.id;
    }
};

var DeleteOldCanvas = function(id) {
    var oldCanvas = document.getElementById(id);
    if (oldCanvas != undefined) {
        // get parent (body)
        var parent = document.body;
        // delete old canvas from parent
        parent.removeChild(oldCanvas);
    }
}

//,"RenderingcLine.new('myCanvas', {'arrow':'last','width':10,'fill':'red','is_test':true});"
// RenderingcLine.new("myCanvas", 0, 0, 50, 50)
var RenderingcLine = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        if (options.width)
            context.lineWidth = options.width;
        if (options.fill)
            context.strokeStyle = options.fill;

        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        context.stroke();
    }
};

var RenderingcOval = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        if (options.fill)
            context.fillStyle = options.fill;

        var x = (x1 + x2) / 2;
        var y = (y1 + y2) / 2;
        var radiusX = Math.abs(x1 - x2);
        var radiusY = Math.abs(y1 - y2);

        context.beginPath();
        context.arc(x, y, radiusX, 0, 2 * Math.PI, true);
        context.fill();
    }
};

var RenderingcPoint = {
    new: function(canvas, x, y, radius) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        context.beginPath();
        context.arc(x, y, radius, 0, 2 * Math.PI, true);
        context.fill();
    }
}

var RenderingDrawTrtl = {
    new: function(canvasID, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvasID);
        var context = canvas.getContext('2d');

        if (window.currentTrtl) {
            var clearPixels = window.currentTrtl.getClearPixels();
            context.clearRect(clearPixels[0], clearPixels[1], clearPixels[2], clearPixels[3]);
        }

        RenderingcTriangle.new(canvasID, x1, y1, x2, y2, options);
    }
}




// RenderingcTriangle.new("trtlCanvas", 20, 40, 25, 20, 8)
var RenderingcTriangle = {
    // point 1: start of trianble (base)
    // point 2: Tip of triangle
    new: function(canvasID, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvasID);
        var context = canvas.getContext('2d');

        if (options.width)
            var width = options.width;
        else
            var width = 10;


        if (options.fill)
            context.fillStyle = options.fill;

        var a = new ArrowShape(x1, y1, x2, y2, width);
        var corners = a.getCorners();

        var path=new Path2D();
        path.moveTo(corners[0][0], corners[0][1]);
        path.lineTo(corners[1][0], corners[1][1]);
        path.lineTo(corners[2][0], corners[2][1]);
        context.fill(path);
        window.currentTrtl = a;
    }
}


var ArrowShape = function(x1, y1, x2, y2, width) {
    var x1 = x1;
    var y1 = y1;
    var x2 = x2;
    var y2 = y2;
    var width = width;

    var c1 = undefined;
    var c2 = undefined;
    var c3 = undefined;


    var getCornerFromLine = function(side) {
        if (side === "right")
            var sideSign = 1;
        else
            var sideSign = -1;

        var d_y = y2 - y1; // distance from y1 and y2
        var d_x = x1 - x2;
        var m = d_y/d_x; // slope

        var theta = Math.atan2(d_y, d_x); // * 180 / Math.PI;
        theta = theta + sideSign * Math.PI/2 % (2*Math.PI);

        var x_r = width/2 * Math.cos(theta) + x1;
        var y_r = y1 - width/2 * Math.sin(theta);

        return [x_r, y_r];
    };

    this.getCorners = function() {
        c1 = [x2, y2];
        c2 = getCornerFromLine("right");
        c3 = getCornerFromLine("left");
        return [c1, c2, c3];
    };

    // find the highest, lowest, leftist, and rightest pixels of the triangle
    // and clear said rectangle =)
    this.getClearPixels = function() {
        // find top-most, bottom-most, left-most and right-most points
        var leftMost = c1[0] < c2[0] ? c1[0] : c2[0];
        leftMost = leftMost < c3[0] ? leftMost : c3[0];

        var rightMost = c1[0] > c2[0] ? c1[0] : c2[0];
        rightMost = rightMost > c3[0] ? rightMost : c3[0];

        var topMost = c1[1] < c2[1] ? c1[1] : c2[1];
        topMost = topMost < c3[1] ? topMost : c3[1];

        var bottomMost = c1[1] > c2[1] ? c1[1] : c2[1];
        bottomMost = bottomMost > c3[1] ? bottomMost : c3[1];

        return [leftMost-5, topMost-5, rightMost+5, bottomMost+5];
    }

}

</script>

<%= @command_cache_fast_evaluator %>
