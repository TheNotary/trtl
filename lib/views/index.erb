<script src="http://127.0.0.1:4555/faye/client.js"></script>

<!-- STUFF RELATED TO COMMUNICATION WITH MAGIC MIRROR: MOVES VERY SOON -->
<!-- <script src="/web_socket_sauce.js"></script> -->
<script>
var betaMessage = "";
fayeUtility = { client: ""};

fayeUtility.createNewChatClient = function(serverAddress, chatPort){
    var client = new Faye.Client('http://' + serverAddress + ':' + chatPort + '/faye', {
        timeout: 120
    });
    client.bind('transport:down', function() {
        alert('Warning:  The connection has been lost.' + betaMessage);
        //fayeUtility.setStatusToFailed();
    });
    client.bind('transport:up', function() {
        printToConsole("Connected to Faye");
        //fayeUtility.setStatusToConnected();
    });
    return client;
};

var client = fayeUtility.createNewChatClient("localhost", "4555");
var channel = "/0001";

function printToConsole(msg){
    // var el = document.getElementById('console');
    // el.innerHTML = el.innerHTML + "<div>" + msg + "</div>";
    console.log("Got command from ruby: " + msg);
}

var subscription = client.subscribe(channel, function(message) {
    printToConsole(JSON.stringify(message));

    // Run the code!
    eval(message)
});

function publish_message_to_faye(msg){
    client.publish(channel, {text: msg});
}



</script>





<body style="background:black;">
</body>




<script>




var MagicMirror = {
    setTitle: function(title) {
        document.title = title;
    },
    clearCommandCache: function() {
        window.command_cache = [];
    }
};

// RenderingCanvas.new("myCanvas", { title: 'trtl', minsize: [800, 600] })
var RenderingCanvas = {
    new: function(canvasID, options) {
        var canvas = document.createElement('canvas');

        canvas.id = canvasID;
        canvas.width = options.width;
        canvas.height = options.height;
        canvas.style.zIndex = 8;
        canvas.style.position = "absolute";
        canvas.style.left = 8;
        canvas.style.top = 8;
        canvas.style.border = "1px solid";
        //canvas.style.background = options.bg;

        // options.highlightthickness: 0
        // options.bg: 'black'

        // delete canvas element if it exists
        //  > Get old canvas
        var oldCanvas = document.getElementById("myCanvas");
        if (oldCanvas != undefined) {
            // get parent (body)
            var parent = document.body;
            // delete old canvas from parent
            parent.removeChild(oldCanvas);
        }

        document.body.appendChild(canvas);
        return canvas.id;
    }
};

//,"RenderingcLine.new('myCanvas', {'arrow':'last','width':10,'fill':'red','is_test':true});"
// RenderingcLine.new("myCanvas", 0, 0, 50, 50)
var RenderingcLine = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        // width
        if (options.width)
            context.lineWidth = options.width;
        // color = options.fill
        if (options.fill)
            context.strokeStyle = options.fill;

        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        context.stroke();
    }
};

var RenderingcOval = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        if (options.fill)
            context.fillStyle = options.fill;

        var x = (x1 + x2) / 2;
        var y = (y1 + y2) / 2;
        var radiusX = Math.abs(x1 - x2);
        var radiusY = Math.abs(y1 - y2);

        context.beginPath();
        context.arc(x, y, radiusX, 0, 2 * Math.PI, true);
        // context.ellipse(x, y, radiusX, radiusY, 0, 0, 2 * Math.PI);
        context.fill();
    }
};

var RenderingcPoint = {
    new: function(canvas, x, y, radius) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        context.beginPath();
        context.arc(x, y, radius, 0, 2 * Math.PI, true);
        context.fill();
    }
}

var RenderingDrawTrtl = {
    new: function(canvasID, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvasID);
        var context = canvas.getContext('2d');

        context.clearRect(0, 0, canvas.width, canvas.height);

        RenderingcTriangle.new(canvasID, x1, y1, x2, y2, options);
    }
}

// RenderingcTriangle.new("trtlCanvas", 20, 40, 25, 20, 8)
var RenderingcTriangle = {
    // point 1: start of trianble (base)
    // point 2: Tip of triangle
    new: function(canvasID, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvasID);
        var context = canvas.getContext('2d');

        if (options.width)
            var width = options.width;
        else
            var width = 10;


        if (options.fill)
            context.fillStyle = options.fill;

        var a = new ArrowShape(x1, y1, x2, y2, width);
        var corners = a.getCorners();

        var path=new Path2D();
        path.moveTo(corners[0][0], corners[0][1]);
        path.lineTo(corners[1][0], corners[1][1]);
        path.lineTo(corners[2][0], corners[2][1]);
        context.fill(path);
        window.currentTrtl = a;
    }
}


var ArrowShape = function(x1, y1, x2, y2, width) {
    var x1 = x1;
    var y1 = y1;
    var x2 = x2;
    var y2 = y2;
    var width = width;

    var getCornerFromLine = function(side) {
        if (side === "right")
            var sideSign = 1;
        else
            var sideSign = -1;

        var d_y = y2 - y1; // distance from y1 and y2
        var d_x = x1 - x2;
        var m = d_y/d_x; // slope

        var theta = Math.atan2(d_y, d_x); // * 180 / Math.PI;
        theta = theta + sideSign * Math.PI/2 % (2*Math.PI);

        var x_r = width/2 * Math.cos(theta) + x1;
        var y_r = y1 - width/2 * Math.sin(theta);

        return [x_r, y_r];
    };

    this.getCorners = function() {
        var c1 = [x2, y2];
        var c2 = getCornerFromLine("right");
        var c3 = getCornerFromLine("left");
        return [c1, c2, c3];
    };

}



window.command_cache = <%= @command_cache %>;

for (var i = 0; i < command_cache.length; i++) {
    // run each command in the command_cache...
    var cmd = command_cache[i];
    eval(cmd);
}

//RenderingcTriangle.new("trtlCanvas", 20, 40, 15, 20, 20);
// RenderingcTriangle.new("trtlCanvas", 20, 40, 24, 20, 20);

// RenderingcTriangle.new("trtlCanvas", 20, 40, 25, 20, 20);
//RenderingcTriangle.new("trtlCanvas", 400, 300, 405, 300, 10);
// RenderingDrawTrtl.new("trtlCanvas", 400, 300, 405, 300, 10);
// RenderingDrawTrtl.new("trtlCanvas", 400, 300, 405, 300, { 'width': 10, 'fill':'green' });

// RenderingDrawTrtl.new('trtlCanvas',420.0,300.0,425.0,300.0, {'arrow':'last','width':10,'fill':'green','is_test':true});

</script>
