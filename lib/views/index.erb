
<body>
</body>



<script src="/web_socket_sauce.js"></script>

<script>


var MagicMirror = {
    setTitle: function(title) {
        document.title = title;
    }
};



// RenderingCanvas.new("myCanvas", { title: 'trtl', minsize: [800, 600] })
var RenderingCanvas = {
    new: function(canvasID, options) {
        var canvas = document.createElement('canvas');

        canvas.id = canvasID;
        canvas.width = options.width;
        canvas.height = options.height;
        canvas.style.zIndex = 8;
        canvas.style.position = "absolute";
        canvas.style.left = 8;
        canvas.style.top = 8;
        canvas.style.border = "1px solid";

        // options.highlightthickness: 0
        // options.bg: 'black'

        // delete canvas element if it exists
        //  > Get old canvas
        var oldCanvas = document.getElementById("myCanvas");
        if (oldCanvas != undefined) {
            // get parent (body)
            var parent = document.body;
            // delete old canvas from parent
            parent.removeChild(oldCanvas);
        }

        document.body.appendChild(canvas);
        return canvas.id;
    }
};

//,"RenderingcLine.new('myCanvas', {'arrow':'last','width':10,'fill':'red','is_test':true});"
// RenderingcLine.new("myCanvas", 0, 0, 50, 50)
var RenderingcLine = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        // width
        if (options.width)
            context.lineWidth = options.width;
        // color = options.fill
        if (options.fill)
            context.strokeStyle = options.fill;

        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
        context.stroke();
    }
};

var RenderingcOval = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');


    }
};

var RenderingcPoint = {
    new: function(canvas, x, y, radius) {
        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        context.beginPath();
        context.arc(x, y, radius, 0, 2 * Math.PI, true);
        context.fill();
    }
}

var RenderingDrawTrtl = {
    new: function(canvas, x1, y1, x2, y2, options) {
        var canvas = document.getElementById("trtlCanvas");
        var context = canvas.getContext('2d');

        context.clearRect(0, 0, canvas.width, canvas.height);


    }
}

// RenderingcTriangle.new("trtlCanvas", 20, 40, 20, 20, 8)
// RenderingcTriangle.new("trtlCanvas", 20, 40, 25, 20, 8)
var RenderingcTriangle = {
    // point 1: start of trianble (base)
    // point 2: Tip of triangle
    new: function(canvas, x1, y1, x2, y2, width) {

        var a = new ArrowShape(x1, y1, x2, y2, width);

        var canvas = document.getElementById(canvas);
        var context = canvas.getContext('2d');

        var corners = a.getCorners();

        console.log("P2: " + corners[0]);
        console.log("P_r: " + corners[1]);
        console.log("P_l: " + corners[2]);




        //var path=new Path2D();
        // path.moveTo(75,50);
        // path.lineTo(100,75);
        // path.lineTo(100,25);
        // path.moveTo(x2, y2);
        // path.lineTo()
        //
        // context.fill(path);
    },
    getArrowCorner: function(x1, y1, x2, y2) {

    }
}


var ArrowShape = function(x1, y1, x2, y2, width) {
    var x1 = x1;
    var y1 = y1;
    var x2 = x2;
    var y2 = y2;
    var width = width;

    this.getCornerFromLine = function(side) {
        if (side === "right")
            var sideSign = 1;
        else
            var sideSign = -1;

        console.log("P1: (" + x1 + ", " + y1 + ")");
        console.log("P2: (" + x2 + ", " + y2 + ")");

        RenderingcPoint.new("myCanvas", x1, y1, 2);
        RenderingcPoint.new("myCanvas", x2, y2, 2);

        var d_y = y2 - y1; // distance from y1 and y2
        var d_x = x1 - x2;
        var m = d_y/d_x; // slope

        var theta = Math.atan2(d_y, d_x); // * 180 / Math.PI;
        theta = theta + sideSign * Math.PI/2 % (2*Math.PI);
        console.log("theta (radians): " + theta);

        console.log("cos(theta): " + Math.cos(theta));

        var x_r = width/2 * Math.cos(theta) + x1;
        var y_r = y1 - width/2 * Math.sin(theta);
        console.log("P_r: (" + x_r + ", " + y_r + ")");

        RenderingcPoint.new("myCanvas", x_r, y_r, 1);

        return [x_r, y_r];
    };

    this.getCorners = function() {
        var c1 = [x2, y2];
        var c2 = this.getCornerFromLine("right");
        var c3 = this.getCornerFromLine("left");
        return [c1, c2, c3];
    };

}



var command_cache = <%= @command_cache %>;

for (var i = 0; i < command_cache.length; i++) {
    // run each command in the command_cache...
    var cmd = command_cache[i];
    eval(cmd);
}

// RenderingCanvas.new('myCanvas', { title: 'trtl', minsize: [800, 600] });
// RenderingcLine.new('myCanvas', 0, 0, 50, 50);

// RenderingcTriangle.new("trtlCanvas", 20, 40, 20, 20, 20);
//RenderingcTriangle.new("trtlCanvas", 20, 40, 15, 20, 20);
// RenderingcTriangle.new("trtlCanvas", 20, 40, 24, 20, 20);

// RenderingcTriangle.new("trtlCanvas", 20, 40, 25, 20, 20);
// var a = new ArrowShape( 20, 40, 20, 20, 20);
var a = new ArrowShape(20, 40, 24, 20, 20);
// var a = new ArrowShape(20, 40, 19, 20, 20);


a.getCornerFromLine("left");
a.getCornerFromLine("right");

</script>
